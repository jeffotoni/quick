// The BasicAuth middleware implements HTTP Basic Authentication
// to secure specific routes on an HTTP server.
package basicauth

import (
	"encoding/base64"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/jeffotoni/quick/internal/concat"
)


// FuzzBasicAuth performs fuzz testing on the BasicAuth middleware.

// This test verifies the middleware's behavior with random inputs, including:
//   - Valid credentials
//   - Invalid credentials
//   - Edge cases (empty username/password)
//   - Random combinations generated by the fuzzing engine

// Seed corpus:
//   - Valid credentials ("admin", "1234")
//   - Invalid credentials ("wronguser", "wrong")
//   - Empty credentials ("", "")
//   - Partial credentials ("admin", "") and ("", "1234")

// Test logic:
// 1. Creates middleware with fixed credentials ("admin", "1234")
// 2. Generates random credentials using the fuzzing engine
// 3. Creates requests with the generated credentials
// 4. Verifies:
//    - Returns 200 OK only for exact match ("admin:1234")
//    - Returns 401 Unauthorized for all other cases

// Usage:
//   go test -fuzz=FuzzBasicAuth
func FuzzBasicAuth(f *testing.F) {
	// Adding initial inputs to the Fuzz
	f.Add("admin", "1234")      // Valid credentials
	f.Add("wronguser", "wrong") // Invalid credentials
	f.Add("", "")               // Empty credentials
	f.Add("admin", "")          // Empty password
	f.Add("", "1234")           // Empty user

	// Running the test with random inputs
	f.Fuzz(func(t *testing.T, username, password string) {
		middleware := BasicAuth("admin", "1234")

		handler := middleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("Access allowed"))
		}))

		req := httptest.NewRequest(http.MethodGet, "/", nil)

		// Generate Authorization header using random credentials
		auth := concat.String("Basic ", base64.StdEncoding.EncodeToString([]byte(concat.String(username, ":", password))))
		req.Header.Set("Authorization", auth)

		rec := httptest.NewRecorder()
		handler.ServeHTTP(rec, req)

		// If credentials are "admin:1234", we expect HTTP 200, otherwise 401
		expectedStatus := http.StatusUnauthorized
		if username == "admin" && password == "1234" {
			expectedStatus = http.StatusOK
		}

		// Check if the returned code is what is expected
		if rec.Code != expectedStatus {
			t.Errorf("Para user=%q, pass=%q esperado %d, mas recebeu %d", username, password, expectedStatus, rec.Code)
		}
	})
}
